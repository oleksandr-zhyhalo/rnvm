name: Release

on:
  push:

name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rnvm
            asset_name: rnvm-linux-amd64

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rnvm
            asset_name: rnvm-linux-arm64
            docker: true

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rnvm.exe
            asset_name: rnvm-windows-amd64.exe

          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rnvm
            asset_name: rnvm-macos-amd64

          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rnvm
            asset_name: rnvm-macos-arm64

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Build in Docker (ARM64)
        if: matrix.docker
        run: |
          docker run --rm -v $(pwd):/code \
            -w /code \
            rust:slim \
            bash -c "apt-get update && \
                    apt-get install -y \
                      gcc-aarch64-linux-gnu \
                      pkg-config \
                      libssl-dev \
                      make \
                      libc6-dev && \
                    rustup target add aarch64-unknown-linux-gnu && \
                    PKG_CONFIG_ALLOW_CROSS=1 \
                    OPENSSL_INCLUDE_DIR=/usr/include \
                    OPENSSL_LIB_DIR=/usr/lib \
                    cargo build --release --target aarch64-unknown-linux-gnu"

      - name: Regular Build
        if: "!matrix.docker"
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare asset
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
        shell: bash

      - name: Generate SHA-256
        run: |
          cd release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ matrix.asset_name }} SHA256 > ${{ matrix.asset_name }}.sha256
          else
            shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
          fi
        shell: bash

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/${{ matrix.asset_name }}
            release/${{ matrix.asset_name }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
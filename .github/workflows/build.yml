name: Release

on:
  push:

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rnvm
            asset_name: rnvm-linux-amd64
            use_cross: false

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rnvm
            asset_name: rnvm-linux-arm64
            use_cross: true

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rnvm.exe
            asset_name: rnvm-windows-amd64.exe
            use_cross: false

          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rnvm
            asset_name: rnvm-macos-amd64
            use_cross: false

          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rnvm
            asset_name: rnvm-macos-arm64
            use_cross: false

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross
        uses: taiki-e/install-action@cross

      - name: Build
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Prepare asset
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          fi
        shell: bash

      - name: Generate SHA-256
        run: |
          cd release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ matrix.asset_name }} SHA256 > ${{ matrix.asset_name }}.sha256
          else
            shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
          fi
        shell: bash

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/${{ matrix.asset_name }}
            release/${{ matrix.asset_name }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
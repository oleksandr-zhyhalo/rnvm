name: Release

on:
  # Trigger on push to main or tags, etc. Adjust as you need.
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # Linux x86_64 (native)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rnvm
            asset_name: rnvm-linux-amd64
            use_container: false

          # Linux ARM64 (docker-based cross-compile)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: rnvm
            asset_name: rnvm-linux-arm64
            use_container: true

          # Windows x86_64 (native)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rnvm.exe
            asset_name: rnvm-windows-amd64.exe
            use_container: false

          # macOS x86_64 (native)
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rnvm
            asset_name: rnvm-macos-amd64
            use_container: false

          # macOS ARM64 (native)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rnvm
            asset_name: rnvm-macos-arm64
            use_container: false

    steps:
      # 1. Check out code
      - uses: actions/checkout@v3

      # 2. Install Rust toolchain on non-container (native) builds
      - name: Install Rust
        if: "!matrix.use_container"
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      # 3. Docker-based cross-compile only on Linux
      - name: Build ARM64 version (Vendored OpenSSL)
        if: matrix.use_container
        uses: addnab/docker-run-action@v3
        with:
          image: messense/rust-musl-cross:aarch64-musl
          options: -v ${{ github.workspace }}:/home/rust/src
          run: |
            cd /home/rust/src
            # If needed for other C dependencies:
            # apk update && apk add build-base
            cargo build --release --target aarch64-unknown-linux-musl

      # 4. Regular build for native Linux, macOS, or Windows
      - name: Regular Build
        if: "!matrix.use_container"
        run: cargo build --release --target ${{ matrix.target }}

      # 5. Copy final artifact(s) into a release folder
      - name: Prepare asset
        run: |
          mkdir -p release
          if [ "${{ matrix.use_container }}" = "true" ]; then
            cp target/aarch64-unknown-linux-musl/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          fi
        shell: bash

      # 6. Generate a SHA-256 checksum
      - name: Generate SHA-256
        run: |
          cd release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ matrix.asset_name }} SHA256 > ${{ matrix.asset_name }}.sha256
          else
            shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
          fi
        shell: bash

      # 7. Upload assets to a GitHub Release
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/${{ matrix.asset_name }}
            release/${{ matrix.asset_name }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
